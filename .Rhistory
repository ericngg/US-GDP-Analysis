<<<<<<< HEAD
nation_data <- GDP_data_interest %>%
filter(GeoName == "United States")
>>>>>>> adcb45cdc6f705ba7a395d9e693a0061d7ef939a
View(state_all_industry)
install.packages("leafelt")
install.packages("leaflet")
library("leaflet")
mapbox_token <- pk.eyJ1Ijoib25hb3NmZCIsImEiOiJjamd2Yzk1cGYyYXZjMnltbHRsOWY0cGV2In0.UuVhWcpQJS25AQ7UQLhyaQ
mapbox_token <- "pk.eyJ1Ijoib25hb3NmZCIsImEiOiJjamd2Yzk1cGYyYXZjMnltbHRsOWY0cGV2In0.UuVhWcpQJS25AQ7UQLhyaQ"
labels <- sprintf(
"<strong>%s</strong><br/>%g people / mi<sup>2</sup>",
states$GeoName, states$X1997
) %>% lapply(htmltools::HTML)
states <- state_all_industry
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g people / mi<sup>2</sup>",
states$GeoName, states$X1997
) %>% lapply(htmltools::HTML)
labels <- sprintf(
"Hi",
states$GeoName, states$X1997
) %>% lapply(htmltools::HTML)
leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv("mapbox_token"))) %>%
addPolygons(
fillColor = ~pal(X1997),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~X1997, opacity = 0.7, title = NULL,
position = "bottomright")
library("dplyr")
leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv("mapbox_token"))) %>%
addPolygons(
fillColor = ~pal(X1997),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~X1997, opacity = 0.7, title = NULL,
position = "bottomright")
m <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('mapbox_token')))
View(m)
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
m %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
m %>% addPolygons(
fillColor = ~pal(X1997),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
library("leaflet")
m %>% addPolygons(
fillColor = ~pal(X1997),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
install.packages("geojsonio")
library("geojsonio")
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
m <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('mapbox_token')))
m
install.packages(",maps")
install.packages("maps")
library("maps")
mapStates = map("state", fill = TRUE, plot = FALSE)
leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
m <- leaflet(mapStates) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('mapbox_token')))
m
mapbox_token <- "pk.eyJ1Ijoib25hb3NmZCIsImEiOiJjamhnemV3OXMxaWlpMzBvN3M0enN6eXliIn0.MiQ2gknXtT1r01JHMhpTJA"
m <- leaflet(mapStates) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv("mapbox_token")))
m
m <- leaflet(data = mapStates) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv("mapbox_token")))
m
m <- leaflet(data = mapStates) %>%
setView(-96, 37.8, 4) %>%
addTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv("mapbox_token")))
m
m <- leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE) %>%
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
m <- leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE) %>%
setView(-96, 37.8, 4)
m
m <- leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE) %>%
setView(-96, 37.8, 7)
m
m <- leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE) %>%
setView(-96, 37.8, 5)
m
library(rgdal)
download.file("http://thematicmapping.org/downloads/TM_WORLD_BORDERS_SIMPL-0.3.zip" , destfile="world_shape_file.zip")
system("unzip world_shape_file.zip")
world_spdf=readOGR( dsn= getwd() , layer="TM_WORLD_BORDERS_SIMPL-0.3")
world_spdf=readOGR( dsn= getwd() , layer="TM_WORLD_BORDERS_SIMPL-0.3")
my_spdf=readOGR( dsn= getwd() , layer="TM_WORLD_BORDERS_SIMPL-0.3")
library("rgdal")
my_spdf=readOGR( dsn= getwd() , layer="TM_WORLD_BORDERS_SIMPL-0.3")
world_spdf=readOGR( dsn= getwd() , layer="TM_WORLD_BORDERS_SIMPL-0.3")
head(world_spdf@data)
summary(world_spdf@data)
# Modify these info
world_spdf@data$POP2005[ which(world_spdf@data$POP2005 == 0)] = NA
world_spdf@data$POP2005 = as.numeric(as.character(world_spdf@data$POP2005)) / 1000000 %>% round(2)
mypalette = colorNumeric( palette="viridis", domain=world_spdf@data$POP2005, na.color="transparent")
mypalette(c(45,43))
# Basic choropleth with leaflet?
leaflet(world_spdf) %>%
addTiles()  %>%
setView( lat=10, lng=0 , zoom=2) %>%
addPolygons( fillColor = ~mypalette(POP2005), stroke=FALSE )
View(world_spdf)
m %>% addPolygons( data = world_spdf
fillColor = ~pal(X1997),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
leaflet(world_spdf) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv("mapbox_token"))) %>%
addPolygons(
fillColor = ~pal(X1997),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~X1997, opacity = 0.7, title = NULL,
position = "bottomright")
states <- geojsonio::geojson_read("data/USA.geo.json", what = "sp")
library("geojsonio")
states <- geojsonio::geojson_read("data/USA.geo.json", what = "sp")
=======
mutate(year = c(1997:2017))
colnames(trend_data) <- c("GDP", "Year")
trend_data$GDP <- as.numeric(as.character(trend_data$GDP))
# Trend chart
trend_chart <- ggplot(data = trend_data) +
geom_line(aes(x = Year, y = GDP, group = 1))
trend_chart
?geom_line
trend_chart <- ggplot(data = trend_data) +
geom_line(aes(x = Year, y = GDP, group = 1),
color = "black",) +
geom_point()
trend_chart
trend_chart <- ggplot(data = trend_data,
aes(x = Year, y = GDP, group = 1)) +
geom_line() +
geom_point()
trend_chart
trend_chart <- ggplot(data = trend_data,
aes(x = Year, y = GDP, group = 1)) +
geom_line() +
geom_point()
# Trend chart
trend_chart <- ggplot(data = trend_data,
aes(x = Year, y = GDP, group = 1)) +
geom_line() +
geom_point() +
labs(title = "U.S. GDP Trend (1997-2017)", y = "GDP (in millions)")
trend_chart
# Trend chart
trend_chart <- ggplot(data = trend_data,
aes(x = Year, y = GDP, group = 1)) +
geom_line() +
geom_point(text = paste(Year, "<br/> $", GDP)) +
labs(title = "U.S. GDP Trend (1997-2017)", y = "GDP (in millions)")
trend_chart <- ggplot(data = trend_data,
aes(x = Year, y = GDP, group = 1)) +
geom_line() +
geom_point(text = paste(trend_data$Year, "<br/> $", trend_data$GDP)) +
labs(title = "U.S. GDP Trend (1997-2017)", y = "GDP (in millions)")
p <- plot_ly(trend_data, x = ~Year, y = ~GDP, type = 'scatter', mode = 'lines')
p
trend_chart
# Trend chart
trend_chart <- p <- plot_ly(trend_data, x = ~Year, y = ~GDP,
type = 'scatter', mode = 'lines') %>%
layout(title = "U.S. GDP Trend (1997-2017)",
xaxis = title = "Months",
yaxis = title = "GDP (in millions)")
trend_chart <- p <- plot_ly(trend_data, x = ~Year, y = ~GDP,
type = 'scatter', mode = 'lines') %>%
layout(title = "U.S. GDP Trend (1997-2017)",
xaxis = "Months",
yaxis = "GDP (in millions)")
trend_chart
trend_chart <- plot_ly(trend_data, x = ~Year, y = ~GDP,
type = 'scatter', mode = 'lines') %>%
layout(title = "U.S. GDP Trend (1997-2017)",
xaxis = "Months",
yaxis = "GDP (in millions)")
trend_chart
library(dplyr)
library(plotly)
library(ggplot2)
library(leaflet)
=======
GDP_data <- GDP_data[-c(1:4680, 5401:5403), ]
industry_filter <- c("11, 21", 22, 23, "31-33", 42, "44-45", "48-49",
51, "52, 53", "54, 55, 56", 61, 62, 71, 72, 81)
filtered_region_2017 <- GDP_data %>%
filter(Description %in% industry_filter) %>%
select(GeoName, Description, X2017)
filtered_region_2017 <- GDP_data %>%
filter(IndustryClassification %in% industry_filter) %>%
select(GeoName, Description, X2017)
<<<<<<< HEAD
=======
#convert from strings into factors
filtered_region_2017$X2017 <- as.numeric(as.character(filtered_region_2017$X2017))
#get rid of "NA"
Region_2017 <- filtered_region_2017 %>%
filter(X2017 != "NA")
New_Engl <- Region_2017 %>%
filter(GeoName == "New England") %>%
summarise(total = sum(X2017))
>>>>>>> 3ec5f3bf6fccbbd11e08bb0ef193646342962281
>>>>>>> ec5f464cee244bf5a73897e9f37a0205b843b0e1
#read data
GDP_data <- read.csv(
file = "./data/gdpstate.csv",
stringsAsFactors = FALSE
)
#select columns of interest
<<<<<<< HEAD
GDP_data_interest <- GDP_data %>%
select(GeoName, Description)
# Map data
map_data <- GDP_data %>%
filter(Description == "All industry total") %>%
select(GeoName, X2017)
# Trend data
trend_data <- GDP_data %>%
filter(GeoName == "United States",
Description == "All industry total") %>%
select(paste0("X", 1997:2017)) %>%
t() %>%
data.frame() %>%
mutate(year = c(1997:2017))
colnames(trend_data) <- c("GDP", "Year")
trend_data$GDP <- as.numeric(as.character(trend_data$GDP))
# Trend chart
trend_chart <- plot_ly(trend_data, x = ~Year, y = ~GDP,
type = 'scatter', mode = 'lines') %>%
layout(title = "U.S. GDP Trend (1997-2017)",
xaxis = "Months",
yaxis = "GDP (in millions)")
trend_chart
View(trend_data)
View(trend_data)
trend_chart <- plot_ly(trend_data, x = ~Year, y = ~GDP,
type = 'scatter', mode = 'lines')
trend_chart
# Trend chart
trend_chart <- plot_ly(trend_data, x = ~Year, y = ~GDP,
type = 'scatter', mode = 'lines') %>%
layout(title = "U.S. GDP Trend (1997-2017)",
yaxis = "GDP (in millions)")
trend_chart
trend_chart <- plot_ly(trend_data, x = ~Year, y = ~GDP,
type = 'scatter', mode = 'lines')
trend_chart
trend_chart <- plot_ly(trend_data, x = ~Year, y = ~GDP,
type = 'scatter', mode = 'lines') %>%
layout(title = "U.S. GDP Trend (1997-2017)",
yaxis = "GDP (in millions)")
trend_chart
library(dplyr)
library(plotly)
library(ggplot2)
library(leaflet)
=======
GDP_data <- GDP_data[-c(1:4680, 5401:5403), ]
unfiltered <- GDP_data %>%
filter(Description == "All industry total" |
Description == " Private industries" |
Description == " Government and government enterprises") %>%
select(GeoName, Description, X2017)
View(unfiltered)
# Slice data into three categories: all industry, private industry, and Gov
chunky_data <- GDP_data %>%
filter(Description == "All industry total" |
Description == " Private industries" |
Description == " Government and government enterprises") %>%
select(GeoName, Description, X2017)
# Slice data into three categories: all industry, private industry, and Gov
chunky_regional <- GDP_data %>%
filter(Description == "All industry total" |
Description == " Private industries" |
Description == " Government and government enterprises") %>%
select(GeoName, Description, X2017)
library("dplyr")
library(ggplot2)
library(plotly)
#read data
GDP_data <- read.csv(
file = "./data/gdpstate.csv",
stringsAsFactors = FALSE
)
#select columns of interest
GDP_data <- GDP_data[-c(1:4680, 5401:5403), ]
# Slice data into three categories: all industry, private industry, and Gov
chunky_regional <- GDP_data %>%
filter(Description == "All industry total" |
Description == " Private industries" |
Description == " Government and government enterprises") %>%
select(GeoName, Description, X2017)
library(shiny)
library(dplyr)
library(ggplot2)
library(plotly)
View(chunky_regional)
View(chunky_regional)
ggplot(chunky_regional, aes(x = GeoName, y = X2017)) +
geom_bar(stat="identity")
#convert from strings into numeric factors
chunky_regional$X2017 <- as.numeric(as.character(chunky_regional$X2017))
ggplot(chunky_regional, aes(x = GeoName, y = X2017)) +
geom_bar(stat="identity")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
GDP_data[-c(1:4680, 5401:5403), ] %>%
mutate(GDP_2017 = X2017 / 1000)
library("dplyr")
<<<<<<< HEAD
library(ggplot2)
library(plotly)
=======
>>>>>>> 3ec5f3bf6fccbbd11e08bb0ef193646342962281
>>>>>>> ec5f464cee244bf5a73897e9f37a0205b843b0e1
#read data
GDP_data <- read.csv(
file = "./data/gdpstate.csv",
stringsAsFactors = FALSE
)
GDP_data[-c(1:4680, 5401:5403), ] %>%
mutate(GDP_2017 = X2017 / 1000)
#select columns of interest
<<<<<<< HEAD
GDP_data_interest <- GDP_data %>%
select(GeoName, Description)
# Map data
map_data <- GDP_data %>%
filter(Description == "All industry total") %>%
select(GeoName, X2017)
# Trend data
trend_data <- GDP_data %>%
filter(GeoName == "United States",
Description == "All industry total") %>%
select(paste0("X", 1997:2017)) %>%
t() %>%
data.frame() %>%
mutate(year = c(1997:2017))
colnames(trend_data) <- c("GDP", "Year")
trend_data$GDP <- as.numeric(as.character(trend_data$GDP))
# Trend chart
trend_chart <- plot_ly(trend_data, x = ~Year, y = ~GDP,
type = 'scatter', mode = 'lines') %>%
layout(title = "U.S. GDP Trend (1997-2017)",
yaxis = "GDP (in millions)")
trend_chart
# Trend chart
trend_chart <- plot_ly(trend_data, x = ~Year, y = ~GDP,
type = 'scatter', mode = 'lines') %>%
layout(title = "U.S. GDP Trend (1997-2017)",
xaxis = "",
yaxis = "GDP (in millions)")
trend_chart
trend_chart <- plot_ly(trend_data, x = ~Year, y = ~GDP,
type = 'scatter', mode = 'lines') %>%
layout(title = "U.S. GDP Trend (1997-2017)",
xaxis = list(title = "Year"),
yaxis = list(title = "GDP (in millions)"))
trend_chart
trend_chart <- plot_ly(trend_data, x = ~Year, y = ~GDP,
type = 'scatter', mode = 'lines') %>%
add_trace(text = paste0(Year, "<br/> $", GDP))
layout(title = "U.S. GDP Trend (1997-2017)",
xaxis = list(title = "Year"),
yaxis = list(title = "GDP (in millions)"))
trend_chart <- plot_ly(trend_data, x = ~Year, y = ~GDP,
type = 'scatter', mode = 'lines') %>%
add_trace(text = paste0(Year, "<br/> $", GDP)) %>%
layout(title = "U.S. GDP Trend (1997-2017)",
xaxis = list(title = "Year"),
yaxis = list(title = "GDP (in millions)"))
trend_chart <- plot_ly(trend_data, x = ~Year, y = ~GDP,
type = 'scatter', mode = 'lines') %>%
add_trace(hoverinfo = paste0(Year, "<br/> $", GDP)) %>%
layout(title = "U.S. GDP Trend (1997-2017)",
xaxis = list(title = "Year"),
yaxis = list(title = "GDP (in millions)"))
# Trend chart
trend_chart <- plot_ly(trend_data, x = ~Year, y = ~GDP,
type = 'scatter', mode = 'lines') %>%
add_trace(hoverinfo = paste0(x, "<br/> $", y)) %>%
layout(title = "U.S. GDP Trend (1997-2017)",
xaxis = list(title = "Year"),
yaxis = list(title = "GDP (in millions)"))
trend_chart <- plot_ly(trend_data, x = ~Year, y = ~GDP,
type = 'scatter', mode = 'lines') %>%
add_trace(hoverinfo = paste0("x", "<br/> $", "y")) %>%
layout(title = "U.S. GDP Trend (1997-2017)",
xaxis = list(title = "Year"),
yaxis = list(title = "GDP (in millions)"))
trend_chart
trend_chart <- plot_ly(trend_data, x = ~Year, y = ~GDP,
type = 'scatter', mode = 'lines') %>%
layout(title = "U.S. GDP Trend (1997-2017)",
xaxis = list(title = "Year"),
yaxis = list(title = "GDP (in millions)"))
trend_chart
trend_chart <- plot_ly(trend_data, x = ~Year, y = ~GDP,
type = "scatter", mode = "lines+markers") %>%
layout(title = "U.S. GDP Trend (1997-2017)",
xaxis = list(title = "Year"),
yaxis = list(title = "GDP (in millions)"))
trend_chart
runApp('C:/Users/USER/Desktop/INFO201/a8-shiny-andrew861003')
runApp('C:/Users/USER/Desktop/INFO201/a8-shiny-andrew861003')
runApp('C:/Users/USER/Desktop/INFO201/a8-shiny-andrew861003')
runApp('C:/Users/USER/Desktop/INFO201/a8-shiny-andrew861003')
runApp('C:/Users/USER/Desktop/INFO201/a8-shiny-andrew861003')
runApp('C:/Users/USER/Desktop/INFO201/a8-shiny-andrew861003')
runApp('C:/Users/USER/Desktop/INFO201/a8-shiny-andrew861003')
install.packages("shiny")
install.packages("shiny")
insertClassMethods("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("shinythemes")
install.packages("ggplot2")
install.packages("plotly")
shiny::runApp('C:/Users/USER/Desktop/INFO201/a8-shiny-andrew861003')
install.packages("shiny")
install.packages("shiny")
library("shiny")
library("shiny")
runApp('C:/Users/USER/Desktop/INFO201/a8-shiny-andrew861003')
runApp('C:/Users/USER/Desktop/INFO201/a8-shiny-andrew861003')
runApp('C:/Users/USER/Desktop/INFO201/a8-shiny-andrew861003')
=======
GDP_data <- GDP_data[-c(1:4680, 5401:5403), ]
GDP_data %>%
mutate(GDP_2017 = X2017 / 1000)
GDP_data <- GDP_data %>%
mutate(GDP_2017 = X2017 / 1000)
GDP_data %>%
mutate(GDP_2017 = X2017 / 1000)
# Slice data into three categories: all industry, private industry, and Gov
chunky_regional <- GDP_data %>%
filter(Description == "All industry total" |
Description == " Private industries" |
Description == " Government and government enterprises") %>%
mutate(GDP_17 = X2017 / 1000) %>%
select(GeoName, Description, GDP_17)
library("dplyr")
library(ggplot2)
library(plotly)
#read data
GDP_data <- read.csv(
file = "./data/gdpstate.csv",
stringsAsFactors = FALSE
)
#select columns of interest
GDP_data <- GDP_data[-c(1:4680, 5401:5403), ]
#convert 2017 data from strings into numeric factors
GDP_data$X2017 <- as.numeric(as.character(GDP_data$X2017))
# Slice data into three categories: all industry, private industry, and Gov
chunky_regional <- GDP_data %>%
filter(Description == "All industry total" |
Description == " Private industries" |
Description == " Government and government enterprises") %>%
mutate(GDP_17 = X2017 / 1000) %>%
select(GeoName, Description, GDP_17)
View(chunky_regional)
# Slice data into three categories: all industry, private industry, and Gov
chunky_regional <- GDP_data %>%
filter(Description == "All industry total" |
Description == " Private industries" |
Description == " Government and government enterprises") %>%
mutate(GDP_17 = X2017 / 1000) %>%
select(GeoName, Description, GDP_17_inbillion)
# Slice data into three categories: all industry, private industry, and Gov
chunky_regional <- GDP_data %>%
filter(Description == "All industry total" |
Description == " Private industries" |
Description == " Government and government enterprises") %>%
mutate(GDP_17_inbillion = X2017 / 1000) %>%
select(GeoName, Description, GDP_17_inbillion)
runApp()
runApp()
runApp()
runApp()
>>>>>>> 25ca881364b5716058b13f2f40deb9ca58347d91
#read data
GDP_data <- read.csv(
file = "./data/gdpstate.csv",
stringsAsFactors = FALSE
)
<<<<<<< HEAD
#select columns of interest
GDP_data <- GDP_data[-c(4681:5403), ]
GDP_data_interest <- GDP_data %>%
select(GeoName, Description, starts_with("X"))
# all industry data
all_industry <- GDP_data_interest %>%
filter(Description == "All industry total")
# Nationwide data
nation_data <- GDP_data_interest %>%
filter(GeoName == "United States")
View(all_industry)
states <- geojsonio::geojson_read("data/USA.geo.json", what = "sp")
states <- geojson_read("data/USA.geo.json", method = "local", what = "sp")
detach("package:rgdal", unload=TRUE)
library("rgdal", lib.loc="~/R/win-library/3.4")
states <- geojson_read("data/USA.geo.json", method = "local", what = "sp")
states <- rgdal::ogrListLayers("data/USA.geo.json", method = "local", what = "sp")
states <- rgdal::ogrListLayers("data/USA.geo.json")
library(sp)
library(shiny)
states <- world_spdf=readOGR( dsn= getwd, layer = "USA.geo.json")
states <- world_spdf=readOGR( dsn= getwd(), layer = "USA.geo.json")
"GeoJSON" %in% ogrDrivers()$name
states <- readOGR("USA.geo.json", "OGRGeoJSON")
states = readOGR("USA.geo.json", "OGRGeoJSON")
states = readOGR("USA.geojson", "OGRGeoJSON")
states = geojson_read("USA.json", what = "sp")
states <- geojson_read("USA.json", what = "sp")
leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv("mapbox_token"))) %>%
addPolygons(
fillColor = ~pal(X1997),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~X1997, opacity = 0.7, title = NULL,
position = "bottomright")
m <- leaflet(data = state) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE) %>%
setView(-96, 37.8, 5)
m <- leaflet(data = states) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE) %>%
setView(-96, 37.8, 5)
m
plot(states)
View(nation_data)
View(states)
names(states)
states["NAME"]
head(states)
names(state)
name(states)
names(state)
names(states)
states <- merge(states, all_industry, by.x = "STATE", by.y = "Geo Name")
states <- merge(states, all_industry, by.x = "STATE", by.y = "GeoName")
states <- geojson_read("USA.json", what = "sp")
states <- merge(states, all_industry, by.x = "NAME", by.y = "GeoName")
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
labels <- sprintf(
"Hi",
states$GeoName, states$X1997
) %>% lapply(htmltools::HTML)
leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv("mapbox_token"))) %>%
addPolygons(
fillColor = ~pal(X1997),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~X1997, opacity = 0.7, title = NULL,
position = "bottomright")
source("key.R")
source("keys.R")
m <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv("mapbox_token")))
m
m <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addTiles()
m
m %>% addPolygons()
pal <- colorBin("YlOrRd", domain = states$X1997, bins = bins)
m %>% addPolygons(
fillColor = ~pal(),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$X1997, bins = bins)
leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(X1997),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~X1997, opacity = 0.7, title = NULL,
position = "bottomright")
m %>% addPolygons(
x = states,
fillColor = ~pal(),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
m %>% addPolygons(
fillColor = ~pal(),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
m %>% addPolygons(
fillColor = ~pal(X1997),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
is.numeric(nation_data[X1997])
is.numeric(nation_data[nation_data$X1997])
is.numeric(nation_data$X1997)
nation_data$X1997
is.numeric(nation_data$X1997)
nation_data$X1997[1]
nation_data$X1997[2]
is.numeric(nation_data$X1997[1])
as.numeric(nation_data$X1997[1])
m %>% addPolygons(
fillColor = ~pal(as.numeric(X1997)),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
pal <- colorBin("YlOrRd", domain = states$as.numeric(X1997), bins = bins)
pal <- colorBin("YlOrRd", domain = as.numeric(states$X1997), bins = bins)
m %>% addPolygons(
fillColor = ~pal(as.numeric(X1997)),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
library("RColorBrewer")
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = as.numeric(states$X1997), bins = bins)
m %>% addPolygons()
m %>% addPolygons(
fillColor = ~pal(as.numeric(X1997)),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
m %>% addPolygons(
fillColor = ~pal(as.numeric(X1998)),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(as.numeric(X1997)),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~X1997, opacity = 0.7, title = NULL,
position = "bottomright")
states$X1997 = min(as.numeric(states$X1997))
states <- geojson_read("USA.json", what = "sp")
class(states)
states <- merge(states, all_industry, by.x = "STATE", by.y = "GeoName")
states$X1997[as.numeric(states$X1997) == min(as.numeric(states$X1997))]
states$X1997[states$X1997 == min(as.numeric(states$X1997))]
as.numeric(states$X1997)
states$X1997
states <- merge(states, all_industry, by.x = "STATE", by.y = "GeoName")
=======
View(GDP_data)
GDP_data %>%
filter(Description == "All industry total" |
Description == " Private industries" |
Description == " Government and government enterprises" |
IndustryClassification %in% industry_filter)
GDP_data %>%
filter(Description == "All industry total" |
Description == " Private industries" |
Description == " Government and government enterprises" |
IndustryClassification %in% industry_filter) %>%
mutate(GDP_17_inbillion = X2017 / 1000) %>%
select(GeoName, Description, GDP_17_inbillion)
library("dplyr")
library(ggplot2)
library(plotly)
>>>>>>> 25ca881364b5716058b13f2f40deb9ca58347d91
#read data
GDP_data <- read.csv(
file = "./data/gdpstate.csv",
stringsAsFactors = FALSE
)
<<<<<<< HEAD
=======
#select columns of interest
GDP_data <- GDP_data[-c(1:4680, 5401:5403), ]
#convert 2017 data from strings into numeric factors
GDP_data$X2017 <- as.numeric(as.character(GDP_data$X2017))
#industry interested
industry_filter <- c("11, 21", 22, 23, "31-33", 42, "44-45", "48-49",
51, "52, 53", "54, 55, 56", 61, 62, 71, 72, 81)
# Slice data into three categories: all industry, private industry, and Gov
chunky_regional <- GDP_data %>%
filter(Description == "All industry total" |
Description == " Private industries" |
Description == " Government and government enterprises" |
IndustryClassification %in% industry_filter) %>%
mutate(GDP_17_inbillion = X2017 / 1000) %>%
select(GeoName, Description, GDP_17_inbillion)
View(chunky_regional)
# Slice data into three categories: all industry, private industry, and Gov
data_regional <- GDP_data %>%
filter(Description == "All industry total" |
Description == " Private industries" |
Description == " Government and government enterprises" |
IndustryClassification %in% industry_filter) %>%
mutate(GDP_17_inbillion = X2017 / 1000) %>%
select(GeoName, Description, GDP_17_inbillion)
library("dplyr")
library(ggplot2)
library(plotly)
>>>>>>> 25ca881364b5716058b13f2f40deb9ca58347d91
#read data
GDP_data <- read.csv(
file = "./data/gdpstate.csv",
stringsAsFactors = FALSE
)
#select columns of interest
<<<<<<< HEAD
GDP_data <- GDP_data[-c(4681:5403), ]
GDP_data_interest <- GDP_data %>%
select(GeoName, Description, starts_with("X"))
# all industry data
all_industry <- GDP_data_interest %>%
filter(Description == "All industry total")
# Nationwide data
nation_data <- GDP_data_interest %>%
filter(GeoName == "United States")
states <- geojson_read("USA.json", what = "sp")
states <- merge(states, all_industry, by.x = "STATE", by.y = "GeoName")
states <- merge(states, all_industry, by.x = "NAME", by.y = "GeoName")
#read data
GDP_data <- read.csv(
file = "./data/gdpstate.csv",
stringsAsFactors = FALSE
)
#select columns of interest
GDP_data <- GDP_data[-c(4681:5403), ]
GDP_data_interest <- GDP_data %>%
select(GeoName, Description, starts_with("X"))
# all industry data
all_industry <- GDP_data_interest %>%
filter(Description == "All industry total")
# Nationwide data
nation_data <- GDP_data_interest %>%
filter(GeoName == "United States")
states <- geojson_read("USA.json", what = "sp")
View(all_industry)
View(all_industry)
=======
GDP_data <- GDP_data[-c(1:4680, 5401:5403), ]
#convert 2017 data from strings into numeric factors
GDP_data$X2017 <- as.numeric(as.character(GDP_data$X2017))
#industry interested
industry_filter <- c("11, 21", 22, 23, "31-33", 42, "44-45", "48-49",
51, "52, 53", "54, 55, 56", 61, 62, 71, 72, 81)
# Slice data into three categories: all industry, private industry, and Gov
data_regional <- GDP_data %>%
filter(Description == "All industry total" |
Description == " Private industries" |
Description == " Government and government enterprises" |
IndustryClassification %in% industry_filter) %>%
mutate(GDP_17_inbillion = X2017 / 1000) %>%
select(GeoName, Description, GDP_17_inbillion)
View(data_regional)
# all industry data
all_industry <- GDP_data %>%
filter(Description == " Government and government enterprises" |
IndustryClassification %in% industry_filter) %>%
mutate(GDP_17_inbillion = X2017 / 1000) %>%
select(GeoName, Description, GDP_17_inbillion)
View(all_industry)
all_industry %>%
filter(GeoName == "New England")
all_industry %>%
filter(GeoName == "New England") %>%
summarise(hi = sum(GDP_17_inbillion))
# public sector data
public_sector <- GDP_data %>%
filter(Description == " Government and government enterprises") %>%
mutate(GDP_17_inbillion = X2017 / 1000) %>%
select(GeoName, Description, GDP_17_inbillion)
View(public_sector)
# private sector data
private_sector <- GDP_data %>%
filter(IndustryClassification %in% industry_filter) %>%
mutate(GDP_17_inbillion = X2017 / 1000) %>%
select(GeoName, Description, GDP_17_inbillion)
View(private_sector)
private_sector %>%
filter(GeoName == "New England") %>%
summarise(hi = sum(GDP_17_inbillion))
View(all_industry)
# all industry data
all_industry <- GDP_data %>%
filter(Description == " Private industries" |
Description == " Government and government enterprises") %>%
mutate(GDP_17_inbillion = X2017 / 1000) %>%
select(GeoName, Description, GDP_17_inbillion)
runApp()
runApp()
runApp()
View(all_industry)
runApp()
runApp()
View(public_sector)
runApp()
runApp()
runApp()
runApp()
runApp()
>>>>>>> 3ec5f3bf6fccbbd11e08bb0ef193646342962281
shiny::runApp()
install.packages("shinywidgets")
yes
install.packages("shinyWidgets")
runApp()
install.packages("snakecase")
runApp()
install.packages("leaflet")
runApp()
runApp()
runApp()
setwd("~/Desktop/Final-Project-INFO201")
runApp()
runApp()
runApp()
runApp()
>>>>>>> 25ca881364b5716058b13f2f40deb9ca58347d91
