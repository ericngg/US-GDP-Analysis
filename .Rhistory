nation_data <- GDP_data_interest %>%
filter(GeoName == "United States")
>>>>>>> adcb45cdc6f705ba7a395d9e693a0061d7ef939a
View(state_all_industry)
install.packages("leafelt")
install.packages("leaflet")
library("leaflet")
mapbox_token <- pk.eyJ1Ijoib25hb3NmZCIsImEiOiJjamd2Yzk1cGYyYXZjMnltbHRsOWY0cGV2In0.UuVhWcpQJS25AQ7UQLhyaQ
mapbox_token <- "pk.eyJ1Ijoib25hb3NmZCIsImEiOiJjamd2Yzk1cGYyYXZjMnltbHRsOWY0cGV2In0.UuVhWcpQJS25AQ7UQLhyaQ"
labels <- sprintf(
"<strong>%s</strong><br/>%g people / mi<sup>2</sup>",
states$GeoName, states$X1997
) %>% lapply(htmltools::HTML)
states <- state_all_industry
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g people / mi<sup>2</sup>",
states$GeoName, states$X1997
) %>% lapply(htmltools::HTML)
labels <- sprintf(
"Hi",
states$GeoName, states$X1997
) %>% lapply(htmltools::HTML)
leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv("mapbox_token"))) %>%
addPolygons(
fillColor = ~pal(X1997),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~X1997, opacity = 0.7, title = NULL,
position = "bottomright")
library("dplyr")
leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv("mapbox_token"))) %>%
addPolygons(
fillColor = ~pal(X1997),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~X1997, opacity = 0.7, title = NULL,
position = "bottomright")
m <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('mapbox_token')))
View(m)
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
m %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
m %>% addPolygons(
fillColor = ~pal(X1997),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
library("leaflet")
m %>% addPolygons(
fillColor = ~pal(X1997),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
install.packages("geojsonio")
library("geojsonio")
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
m <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('mapbox_token')))
m
install.packages(",maps")
install.packages("maps")
library("maps")
mapStates = map("state", fill = TRUE, plot = FALSE)
leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
m <- leaflet(mapStates) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('mapbox_token')))
m
mapbox_token <- "pk.eyJ1Ijoib25hb3NmZCIsImEiOiJjamhnemV3OXMxaWlpMzBvN3M0enN6eXliIn0.MiQ2gknXtT1r01JHMhpTJA"
m <- leaflet(mapStates) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv("mapbox_token")))
m
m <- leaflet(data = mapStates) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv("mapbox_token")))
m
m <- leaflet(data = mapStates) %>%
setView(-96, 37.8, 4) %>%
addTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv("mapbox_token")))
m
m <- leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE) %>%
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
m <- leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE) %>%
setView(-96, 37.8, 4)
m
m <- leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE) %>%
setView(-96, 37.8, 7)
m
m <- leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE) %>%
setView(-96, 37.8, 5)
m
library(rgdal)
download.file("http://thematicmapping.org/downloads/TM_WORLD_BORDERS_SIMPL-0.3.zip" , destfile="world_shape_file.zip")
system("unzip world_shape_file.zip")
world_spdf=readOGR( dsn= getwd() , layer="TM_WORLD_BORDERS_SIMPL-0.3")
world_spdf=readOGR( dsn= getwd() , layer="TM_WORLD_BORDERS_SIMPL-0.3")
my_spdf=readOGR( dsn= getwd() , layer="TM_WORLD_BORDERS_SIMPL-0.3")
library("rgdal")
my_spdf=readOGR( dsn= getwd() , layer="TM_WORLD_BORDERS_SIMPL-0.3")
world_spdf=readOGR( dsn= getwd() , layer="TM_WORLD_BORDERS_SIMPL-0.3")
head(world_spdf@data)
summary(world_spdf@data)
# Modify these info
world_spdf@data$POP2005[ which(world_spdf@data$POP2005 == 0)] = NA
world_spdf@data$POP2005 = as.numeric(as.character(world_spdf@data$POP2005)) / 1000000 %>% round(2)
mypalette = colorNumeric( palette="viridis", domain=world_spdf@data$POP2005, na.color="transparent")
mypalette(c(45,43))
# Basic choropleth with leaflet?
leaflet(world_spdf) %>%
addTiles()  %>%
setView( lat=10, lng=0 , zoom=2) %>%
addPolygons( fillColor = ~mypalette(POP2005), stroke=FALSE )
View(world_spdf)
m %>% addPolygons( data = world_spdf
fillColor = ~pal(X1997),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
leaflet(world_spdf) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv("mapbox_token"))) %>%
addPolygons(
fillColor = ~pal(X1997),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~X1997, opacity = 0.7, title = NULL,
position = "bottomright")
states <- geojsonio::geojson_read("data/USA.geo.json", what = "sp")
library("geojsonio")
states <- geojsonio::geojson_read("data/USA.geo.json", what = "sp")
#read data
GDP_data <- read.csv(
file = "./data/gdpstate.csv",
stringsAsFactors = FALSE
)
#select columns of interest
GDP_data <- GDP_data[-c(4681:5403), ]
GDP_data_interest <- GDP_data %>%
select(GeoName, Description, starts_with("X"))
# all industry data
all_industry <- GDP_data_interest %>%
filter(Description == "All industry total")
# Nationwide data
nation_data <- GDP_data_interest %>%
filter(GeoName == "United States")
View(all_industry)
states <- geojsonio::geojson_read("data/USA.geo.json", what = "sp")
states <- geojson_read("data/USA.geo.json", method = "local", what = "sp")
detach("package:rgdal", unload=TRUE)
library("rgdal", lib.loc="~/R/win-library/3.4")
states <- geojson_read("data/USA.geo.json", method = "local", what = "sp")
states <- rgdal::ogrListLayers("data/USA.geo.json", method = "local", what = "sp")
states <- rgdal::ogrListLayers("data/USA.geo.json")
library(sp)
library(shiny)
states <- world_spdf=readOGR( dsn= getwd, layer = "USA.geo.json")
states <- world_spdf=readOGR( dsn= getwd(), layer = "USA.geo.json")
"GeoJSON" %in% ogrDrivers()$name
states <- readOGR("USA.geo.json", "OGRGeoJSON")
states = readOGR("USA.geo.json", "OGRGeoJSON")
states = readOGR("USA.geojson", "OGRGeoJSON")
states = geojson_read("USA.json", what = "sp")
states <- geojson_read("USA.json", what = "sp")
leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv("mapbox_token"))) %>%
addPolygons(
fillColor = ~pal(X1997),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~X1997, opacity = 0.7, title = NULL,
position = "bottomright")
m <- leaflet(data = state) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE) %>%
setView(-96, 37.8, 5)
m <- leaflet(data = states) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE) %>%
setView(-96, 37.8, 5)
m
plot(states)
View(nation_data)
View(states)
names(states)
states["NAME"]
head(states)
names(state)
name(states)
names(state)
names(states)
states <- merge(states, all_industry, by.x = "STATE", by.y = "Geo Name")
states <- merge(states, all_industry, by.x = "STATE", by.y = "GeoName")
states <- geojson_read("USA.json", what = "sp")
states <- merge(states, all_industry, by.x = "NAME", by.y = "GeoName")
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
labels <- sprintf(
"Hi",
states$GeoName, states$X1997
) %>% lapply(htmltools::HTML)
leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv("mapbox_token"))) %>%
addPolygons(
fillColor = ~pal(X1997),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~X1997, opacity = 0.7, title = NULL,
position = "bottomright")
source("key.R")
source("keys.R")
m <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv("mapbox_token")))
m
m <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addTiles()
m
m %>% addPolygons()
pal <- colorBin("YlOrRd", domain = states$X1997, bins = bins)
m %>% addPolygons(
fillColor = ~pal(),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$X1997, bins = bins)
leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(X1997),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~X1997, opacity = 0.7, title = NULL,
position = "bottomright")
m %>% addPolygons(
x = states,
fillColor = ~pal(),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
m %>% addPolygons(
fillColor = ~pal(),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
m %>% addPolygons(
fillColor = ~pal(X1997),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
is.numeric(nation_data[X1997])
is.numeric(nation_data[nation_data$X1997])
is.numeric(nation_data$X1997)
nation_data$X1997
is.numeric(nation_data$X1997)
nation_data$X1997[1]
nation_data$X1997[2]
is.numeric(nation_data$X1997[1])
as.numeric(nation_data$X1997[1])
m %>% addPolygons(
fillColor = ~pal(as.numeric(X1997)),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
pal <- colorBin("YlOrRd", domain = states$as.numeric(X1997), bins = bins)
pal <- colorBin("YlOrRd", domain = as.numeric(states$X1997), bins = bins)
m %>% addPolygons(
fillColor = ~pal(as.numeric(X1997)),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
library("RColorBrewer")
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = as.numeric(states$X1997), bins = bins)
m %>% addPolygons()
m %>% addPolygons(
fillColor = ~pal(as.numeric(X1997)),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
m %>% addPolygons(
fillColor = ~pal(as.numeric(X1998)),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(as.numeric(X1997)),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~X1997, opacity = 0.7, title = NULL,
position = "bottomright")
states$X1997 = min(as.numeric(states$X1997))
states <- geojson_read("USA.json", what = "sp")
class(states)
states <- merge(states, all_industry, by.x = "STATE", by.y = "GeoName")
states$X1997[as.numeric(states$X1997) == min(as.numeric(states$X1997))]
states$X1997[states$X1997 == min(as.numeric(states$X1997))]
as.numeric(states$X1997)
states$X1997
states <- merge(states, all_industry, by.x = "STATE", by.y = "GeoName")
#read data
GDP_data <- read.csv(
file = "./data/gdpstate.csv",
stringsAsFactors = FALSE
)
#read data
GDP_data <- read.csv(
file = "./data/gdpstate.csv",
stringsAsFactors = FALSE
)
#select columns of interest
GDP_data <- GDP_data[-c(4681:5403), ]
GDP_data_interest <- GDP_data %>%
select(GeoName, Description, starts_with("X"))
# all industry data
all_industry <- GDP_data_interest %>%
filter(Description == "All industry total")
# Nationwide data
nation_data <- GDP_data_interest %>%
filter(GeoName == "United States")
states <- geojson_read("USA.json", what = "sp")
states <- merge(states, all_industry, by.x = "STATE", by.y = "GeoName")
states <- merge(states, all_industry, by.x = "NAME", by.y = "GeoName")
#read data
GDP_data <- read.csv(
file = "./data/gdpstate.csv",
stringsAsFactors = FALSE
)
#select columns of interest
GDP_data <- GDP_data[-c(4681:5403), ]
GDP_data_interest <- GDP_data %>%
select(GeoName, Description, starts_with("X"))
# all industry data
all_industry <- GDP_data_interest %>%
filter(Description == "All industry total")
# Nationwide data
nation_data <- GDP_data_interest %>%
filter(GeoName == "United States")
states <- geojson_read("USA.json", what = "sp")
View(all_industry)
View(all_industry)
