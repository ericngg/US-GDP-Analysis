colnames(trend_data) <- c("GDP", "Year")
trend_data$GDP <- as.numeric(as.character(trend_data$GDP))
# Trend chart
trend_chart <- ggplot(data = trend_data) +
geom_line(aes(x = Year, y = GDP, group = 1))
trend_chart
?geom_line
trend_chart <- ggplot(data = trend_data) +
geom_line(aes(x = Year, y = GDP, group = 1),
color = "black",) +
geom_point()
trend_chart
trend_chart <- ggplot(data = trend_data,
aes(x = Year, y = GDP, group = 1)) +
geom_line() +
geom_point()
trend_chart
trend_chart <- ggplot(data = trend_data,
aes(x = Year, y = GDP, group = 1)) +
geom_line() +
geom_point()
# Trend chart
trend_chart <- ggplot(data = trend_data,
aes(x = Year, y = GDP, group = 1)) +
geom_line() +
geom_point() +
labs(title = "U.S. GDP Trend (1997-2017)", y = "GDP (in millions)")
trend_chart
# Trend chart
trend_chart <- ggplot(data = trend_data,
aes(x = Year, y = GDP, group = 1)) +
geom_line() +
geom_point(text = paste(Year, "<br/> $", GDP)) +
labs(title = "U.S. GDP Trend (1997-2017)", y = "GDP (in millions)")
trend_chart <- ggplot(data = trend_data,
aes(x = Year, y = GDP, group = 1)) +
geom_line() +
geom_point(text = paste(trend_data$Year, "<br/> $", trend_data$GDP)) +
labs(title = "U.S. GDP Trend (1997-2017)", y = "GDP (in millions)")
p <- plot_ly(trend_data, x = ~Year, y = ~GDP, type = 'scatter', mode = 'lines')
p
trend_chart
# Trend chart
trend_chart <- p <- plot_ly(trend_data, x = ~Year, y = ~GDP,
type = 'scatter', mode = 'lines') %>%
layout(title = "U.S. GDP Trend (1997-2017)",
xaxis = title = "Months",
yaxis = title = "GDP (in millions)")
trend_chart <- p <- plot_ly(trend_data, x = ~Year, y = ~GDP,
type = 'scatter', mode = 'lines') %>%
layout(title = "U.S. GDP Trend (1997-2017)",
xaxis = "Months",
yaxis = "GDP (in millions)")
trend_chart
trend_chart <- plot_ly(trend_data, x = ~Year, y = ~GDP,
type = 'scatter', mode = 'lines') %>%
layout(title = "U.S. GDP Trend (1997-2017)",
xaxis = "Months",
yaxis = "GDP (in millions)")
trend_chart
library(dplyr)
library(plotly)
library(ggplot2)
library(leaflet)
=======
GDP_data <- GDP_data[-c(1:4680, 5401:5403), ]
industry_filter <- c("11, 21", 22, 23, "31-33", 42, "44-45", "48-49",
51, "52, 53", "54, 55, 56", 61, 62, 71, 72, 81)
filtered_region_2017 <- GDP_data %>%
filter(Description %in% industry_filter) %>%
select(GeoName, Description, X2017)
filtered_region_2017 <- GDP_data %>%
filter(IndustryClassification %in% industry_filter) %>%
select(GeoName, Description, X2017)
<<<<<<< HEAD
=======
#convert from strings into factors
filtered_region_2017$X2017 <- as.numeric(as.character(filtered_region_2017$X2017))
#get rid of "NA"
Region_2017 <- filtered_region_2017 %>%
filter(X2017 != "NA")
New_Engl <- Region_2017 %>%
filter(GeoName == "New England") %>%
summarise(total = sum(X2017))
>>>>>>> 3ec5f3bf6fccbbd11e08bb0ef193646342962281
>>>>>>> ec5f464cee244bf5a73897e9f37a0205b843b0e1
#read data
GDP_data <- read.csv(
file = "./data/gdpstate.csv",
stringsAsFactors = FALSE
)
#select columns of interest
<<<<<<< HEAD
GDP_data_interest <- GDP_data %>%
select(GeoName, Description)
# Map data
map_data <- GDP_data %>%
filter(Description == "All industry total") %>%
select(GeoName, X2017)
# Trend data
trend_data <- GDP_data %>%
filter(GeoName == "United States",
Description == "All industry total") %>%
select(paste0("X", 1997:2017)) %>%
t() %>%
data.frame() %>%
mutate(year = c(1997:2017))
colnames(trend_data) <- c("GDP", "Year")
trend_data$GDP <- as.numeric(as.character(trend_data$GDP))
# Trend chart
trend_chart <- plot_ly(trend_data, x = ~Year, y = ~GDP,
type = 'scatter', mode = 'lines') %>%
layout(title = "U.S. GDP Trend (1997-2017)",
xaxis = "Months",
yaxis = "GDP (in millions)")
trend_chart
View(trend_data)
View(trend_data)
trend_chart <- plot_ly(trend_data, x = ~Year, y = ~GDP,
type = 'scatter', mode = 'lines')
trend_chart
# Trend chart
trend_chart <- plot_ly(trend_data, x = ~Year, y = ~GDP,
type = 'scatter', mode = 'lines') %>%
layout(title = "U.S. GDP Trend (1997-2017)",
yaxis = "GDP (in millions)")
trend_chart
trend_chart <- plot_ly(trend_data, x = ~Year, y = ~GDP,
type = 'scatter', mode = 'lines')
trend_chart
trend_chart <- plot_ly(trend_data, x = ~Year, y = ~GDP,
type = 'scatter', mode = 'lines') %>%
layout(title = "U.S. GDP Trend (1997-2017)",
yaxis = "GDP (in millions)")
trend_chart
library(dplyr)
library(plotly)
library(ggplot2)
library(leaflet)
=======
GDP_data <- GDP_data[-c(1:4680, 5401:5403), ]
unfiltered <- GDP_data %>%
filter(Description == "All industry total" |
Description == " Private industries" |
Description == " Government and government enterprises") %>%
select(GeoName, Description, X2017)
View(unfiltered)
# Slice data into three categories: all industry, private industry, and Gov
chunky_data <- GDP_data %>%
filter(Description == "All industry total" |
Description == " Private industries" |
Description == " Government and government enterprises") %>%
select(GeoName, Description, X2017)
# Slice data into three categories: all industry, private industry, and Gov
chunky_regional <- GDP_data %>%
filter(Description == "All industry total" |
Description == " Private industries" |
Description == " Government and government enterprises") %>%
select(GeoName, Description, X2017)
library("dplyr")
library(ggplot2)
library(plotly)
#read data
GDP_data <- read.csv(
file = "./data/gdpstate.csv",
stringsAsFactors = FALSE
)
#select columns of interest
GDP_data <- GDP_data[-c(1:4680, 5401:5403), ]
# Slice data into three categories: all industry, private industry, and Gov
chunky_regional <- GDP_data %>%
filter(Description == "All industry total" |
Description == " Private industries" |
Description == " Government and government enterprises") %>%
select(GeoName, Description, X2017)
library(shiny)
library(dplyr)
library(ggplot2)
library(plotly)
View(chunky_regional)
View(chunky_regional)
ggplot(chunky_regional, aes(x = GeoName, y = X2017)) +
geom_bar(stat="identity")
#convert from strings into numeric factors
chunky_regional$X2017 <- as.numeric(as.character(chunky_regional$X2017))
ggplot(chunky_regional, aes(x = GeoName, y = X2017)) +
geom_bar(stat="identity")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
GDP_data[-c(1:4680, 5401:5403), ] %>%
mutate(GDP_2017 = X2017 / 1000)
library("dplyr")
<<<<<<< HEAD
library(ggplot2)
library(plotly)
=======
>>>>>>> 3ec5f3bf6fccbbd11e08bb0ef193646342962281
>>>>>>> ec5f464cee244bf5a73897e9f37a0205b843b0e1
#read data
GDP_data <- read.csv(
file = "./data/gdpstate.csv",
stringsAsFactors = FALSE
)
GDP_data[-c(1:4680, 5401:5403), ] %>%
mutate(GDP_2017 = X2017 / 1000)
#select columns of interest
<<<<<<< HEAD
GDP_data_interest <- GDP_data %>%
select(GeoName, Description)
# Map data
map_data <- GDP_data %>%
filter(Description == "All industry total") %>%
select(GeoName, X2017)
# Trend data
trend_data <- GDP_data %>%
filter(GeoName == "United States",
Description == "All industry total") %>%
select(paste0("X", 1997:2017)) %>%
t() %>%
data.frame() %>%
mutate(year = c(1997:2017))
colnames(trend_data) <- c("GDP", "Year")
trend_data$GDP <- as.numeric(as.character(trend_data$GDP))
# Trend chart
trend_chart <- plot_ly(trend_data, x = ~Year, y = ~GDP,
type = 'scatter', mode = 'lines') %>%
layout(title = "U.S. GDP Trend (1997-2017)",
yaxis = "GDP (in millions)")
trend_chart
# Trend chart
trend_chart <- plot_ly(trend_data, x = ~Year, y = ~GDP,
type = 'scatter', mode = 'lines') %>%
layout(title = "U.S. GDP Trend (1997-2017)",
xaxis = "",
yaxis = "GDP (in millions)")
trend_chart
trend_chart <- plot_ly(trend_data, x = ~Year, y = ~GDP,
type = 'scatter', mode = 'lines') %>%
layout(title = "U.S. GDP Trend (1997-2017)",
xaxis = list(title = "Year"),
yaxis = list(title = "GDP (in millions)"))
trend_chart
trend_chart <- plot_ly(trend_data, x = ~Year, y = ~GDP,
type = 'scatter', mode = 'lines') %>%
add_trace(text = paste0(Year, "<br/> $", GDP))
layout(title = "U.S. GDP Trend (1997-2017)",
xaxis = list(title = "Year"),
yaxis = list(title = "GDP (in millions)"))
trend_chart <- plot_ly(trend_data, x = ~Year, y = ~GDP,
type = 'scatter', mode = 'lines') %>%
add_trace(text = paste0(Year, "<br/> $", GDP)) %>%
layout(title = "U.S. GDP Trend (1997-2017)",
xaxis = list(title = "Year"),
yaxis = list(title = "GDP (in millions)"))
trend_chart <- plot_ly(trend_data, x = ~Year, y = ~GDP,
type = 'scatter', mode = 'lines') %>%
add_trace(hoverinfo = paste0(Year, "<br/> $", GDP)) %>%
layout(title = "U.S. GDP Trend (1997-2017)",
xaxis = list(title = "Year"),
yaxis = list(title = "GDP (in millions)"))
# Trend chart
trend_chart <- plot_ly(trend_data, x = ~Year, y = ~GDP,
type = 'scatter', mode = 'lines') %>%
add_trace(hoverinfo = paste0(x, "<br/> $", y)) %>%
layout(title = "U.S. GDP Trend (1997-2017)",
xaxis = list(title = "Year"),
yaxis = list(title = "GDP (in millions)"))
trend_chart <- plot_ly(trend_data, x = ~Year, y = ~GDP,
type = 'scatter', mode = 'lines') %>%
add_trace(hoverinfo = paste0("x", "<br/> $", "y")) %>%
layout(title = "U.S. GDP Trend (1997-2017)",
xaxis = list(title = "Year"),
yaxis = list(title = "GDP (in millions)"))
trend_chart
trend_chart <- plot_ly(trend_data, x = ~Year, y = ~GDP,
type = 'scatter', mode = 'lines') %>%
layout(title = "U.S. GDP Trend (1997-2017)",
xaxis = list(title = "Year"),
yaxis = list(title = "GDP (in millions)"))
trend_chart
trend_chart <- plot_ly(trend_data, x = ~Year, y = ~GDP,
type = "scatter", mode = "lines+markers") %>%
layout(title = "U.S. GDP Trend (1997-2017)",
xaxis = list(title = "Year"),
yaxis = list(title = "GDP (in millions)"))
trend_chart
runApp('C:/Users/USER/Desktop/INFO201/a8-shiny-andrew861003')
runApp('C:/Users/USER/Desktop/INFO201/a8-shiny-andrew861003')
runApp('C:/Users/USER/Desktop/INFO201/a8-shiny-andrew861003')
runApp('C:/Users/USER/Desktop/INFO201/a8-shiny-andrew861003')
runApp('C:/Users/USER/Desktop/INFO201/a8-shiny-andrew861003')
runApp('C:/Users/USER/Desktop/INFO201/a8-shiny-andrew861003')
runApp('C:/Users/USER/Desktop/INFO201/a8-shiny-andrew861003')
install.packages("shiny")
install.packages("shiny")
insertClassMethods("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("shinythemes")
install.packages("ggplot2")
install.packages("plotly")
shiny::runApp('C:/Users/USER/Desktop/INFO201/a8-shiny-andrew861003')
install.packages("shiny")
install.packages("shiny")
library("shiny")
library("shiny")
runApp('C:/Users/USER/Desktop/INFO201/a8-shiny-andrew861003')
runApp('C:/Users/USER/Desktop/INFO201/a8-shiny-andrew861003')
runApp('C:/Users/USER/Desktop/INFO201/a8-shiny-andrew861003')
=======
GDP_data <- GDP_data[-c(1:4680, 5401:5403), ]
GDP_data %>%
mutate(GDP_2017 = X2017 / 1000)
GDP_data <- GDP_data %>%
mutate(GDP_2017 = X2017 / 1000)
GDP_data %>%
mutate(GDP_2017 = X2017 / 1000)
# Slice data into three categories: all industry, private industry, and Gov
chunky_regional <- GDP_data %>%
filter(Description == "All industry total" |
Description == " Private industries" |
Description == " Government and government enterprises") %>%
mutate(GDP_17 = X2017 / 1000) %>%
select(GeoName, Description, GDP_17)
library("dplyr")
library(ggplot2)
library(plotly)
#read data
GDP_data <- read.csv(
file = "./data/gdpstate.csv",
stringsAsFactors = FALSE
)
#select columns of interest
GDP_data <- GDP_data[-c(1:4680, 5401:5403), ]
#convert 2017 data from strings into numeric factors
GDP_data$X2017 <- as.numeric(as.character(GDP_data$X2017))
# Slice data into three categories: all industry, private industry, and Gov
chunky_regional <- GDP_data %>%
filter(Description == "All industry total" |
Description == " Private industries" |
Description == " Government and government enterprises") %>%
mutate(GDP_17 = X2017 / 1000) %>%
select(GeoName, Description, GDP_17)
View(chunky_regional)
# Slice data into three categories: all industry, private industry, and Gov
chunky_regional <- GDP_data %>%
filter(Description == "All industry total" |
Description == " Private industries" |
Description == " Government and government enterprises") %>%
mutate(GDP_17 = X2017 / 1000) %>%
select(GeoName, Description, GDP_17_inbillion)
# Slice data into three categories: all industry, private industry, and Gov
chunky_regional <- GDP_data %>%
filter(Description == "All industry total" |
Description == " Private industries" |
Description == " Government and government enterprises") %>%
mutate(GDP_17_inbillion = X2017 / 1000) %>%
select(GeoName, Description, GDP_17_inbillion)
runApp()
runApp()
runApp()
runApp()
#read data
GDP_data <- read.csv(
file = "./data/gdpstate.csv",
stringsAsFactors = FALSE
)
View(GDP_data)
GDP_data %>%
filter(Description == "All industry total" |
Description == " Private industries" |
Description == " Government and government enterprises" |
IndustryClassification %in% industry_filter)
GDP_data %>%
filter(Description == "All industry total" |
Description == " Private industries" |
Description == " Government and government enterprises" |
IndustryClassification %in% industry_filter) %>%
mutate(GDP_17_inbillion = X2017 / 1000) %>%
select(GeoName, Description, GDP_17_inbillion)
library("dplyr")
library(ggplot2)
library(plotly)
#read data
GDP_data <- read.csv(
file = "./data/gdpstate.csv",
stringsAsFactors = FALSE
)
#select columns of interest
GDP_data <- GDP_data[-c(1:4680, 5401:5403), ]
#convert 2017 data from strings into numeric factors
GDP_data$X2017 <- as.numeric(as.character(GDP_data$X2017))
#industry interested
industry_filter <- c("11, 21", 22, 23, "31-33", 42, "44-45", "48-49",
51, "52, 53", "54, 55, 56", 61, 62, 71, 72, 81)
# Slice data into three categories: all industry, private industry, and Gov
chunky_regional <- GDP_data %>%
filter(Description == "All industry total" |
Description == " Private industries" |
Description == " Government and government enterprises" |
IndustryClassification %in% industry_filter) %>%
mutate(GDP_17_inbillion = X2017 / 1000) %>%
select(GeoName, Description, GDP_17_inbillion)
View(chunky_regional)
# Slice data into three categories: all industry, private industry, and Gov
data_regional <- GDP_data %>%
filter(Description == "All industry total" |
Description == " Private industries" |
Description == " Government and government enterprises" |
IndustryClassification %in% industry_filter) %>%
mutate(GDP_17_inbillion = X2017 / 1000) %>%
select(GeoName, Description, GDP_17_inbillion)
library("dplyr")
library(ggplot2)
library(plotly)
#read data
GDP_data <- read.csv(
file = "./data/gdpstate.csv",
stringsAsFactors = FALSE
)
#select columns of interest
GDP_data <- GDP_data[-c(1:4680, 5401:5403), ]
#convert 2017 data from strings into numeric factors
GDP_data$X2017 <- as.numeric(as.character(GDP_data$X2017))
#industry interested
industry_filter <- c("11, 21", 22, 23, "31-33", 42, "44-45", "48-49",
51, "52, 53", "54, 55, 56", 61, 62, 71, 72, 81)
# Slice data into three categories: all industry, private industry, and Gov
data_regional <- GDP_data %>%
filter(Description == "All industry total" |
Description == " Private industries" |
Description == " Government and government enterprises" |
IndustryClassification %in% industry_filter) %>%
mutate(GDP_17_inbillion = X2017 / 1000) %>%
select(GeoName, Description, GDP_17_inbillion)
View(data_regional)
# all industry data
all_industry <- GDP_data %>%
filter(Description == " Government and government enterprises" |
IndustryClassification %in% industry_filter) %>%
mutate(GDP_17_inbillion = X2017 / 1000) %>%
select(GeoName, Description, GDP_17_inbillion)
View(all_industry)
all_industry %>%
filter(GeoName == "New England")
all_industry %>%
filter(GeoName == "New England") %>%
summarise(hi = sum(GDP_17_inbillion))
# public sector data
public_sector <- GDP_data %>%
filter(Description == " Government and government enterprises") %>%
mutate(GDP_17_inbillion = X2017 / 1000) %>%
select(GeoName, Description, GDP_17_inbillion)
View(public_sector)
# private sector data
private_sector <- GDP_data %>%
filter(IndustryClassification %in% industry_filter) %>%
mutate(GDP_17_inbillion = X2017 / 1000) %>%
select(GeoName, Description, GDP_17_inbillion)
View(private_sector)
private_sector %>%
filter(GeoName == "New England") %>%
summarise(hi = sum(GDP_17_inbillion))
View(all_industry)
# all industry data
all_industry <- GDP_data %>%
filter(Description == " Private industries" |
Description == " Government and government enterprises") %>%
mutate(GDP_17_inbillion = X2017 / 1000) %>%
select(GeoName, Description, GDP_17_inbillion)
runApp()
runApp()
runApp()
View(all_industry)
runApp()
runApp()
View(public_sector)
runApp()
runApp()
runApp()
runApp()
runApp()
>>>>>>> 3ec5f3bf6fccbbd11e08bb0ef193646342962281
shiny::runApp()
install.packages("shinywidgets")
yes
install.packages("shinyWidgets")
runApp()
install.packages("snakecase")
runApp()
install.packages("leaflet")
runApp()
runApp()
runApp()
setwd("~/Desktop/Final-Project-INFO201")
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
