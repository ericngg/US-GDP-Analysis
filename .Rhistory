ryan_chiu <- hi
ryan_chiu <- "hi"
print(ryan_chiu)
ryan_chiu
print(ryan_chiu)
clear
print (ryan_chiu)
hours_in_a_week
hours_in_a_week
hours_in_a_week <- 24*7
hours_in_a_week <- 24*7
hours_in_a_week <- 24*7
name <- "Andrew"
my_height<-73
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies<-1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price<-1000
# Create a variable `total_cost` that has the total cost of all of your puppies
taotal_cost<-puppies*puupy_price
total_cost<-puppies*puupy_price
total_cost<-puppies*puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive<-total_cost>1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies<-1000/puppy_price
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "taipei"
# Assign your name to the variable `my_name`
my_name<-"Andrew"
# Assign your height (in inches) to a variable `my_height`
my_height<-73
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies<-1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price<-1000
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost<-puppies*puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive<-total_cost>1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies<-1000/puppy_price
make_birthday_intro <- function(name, age, upcoming_birthday) {
N <- as.Date(upcoming_birthday, "%Y/%m/%d") - today
new_age <- age + 1
intro <- paste(make_introduction("Andrew", "20"), "In ", N, " days I'll be ", new_age, ".", sep = "")
print(intro)
}
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018/10/03")
make_birthday_intro <- function(name, age, upcoming_birthday) {
N <- as.Date(upcoming_birthday, "%Y/%m/%d") - today
new_age <- age + 1
intro <- paste(make_introduction("name", "age"), "In ", N, " days I'll be ", new_age, ".", sep = "")
print(intro)
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018/10/03")
# a2-foundational-skills
# Set up and Defining variables ------------------------------------------------
# Install and load the the `stringr` package
# It has a variety of functions that make working with string variables easier
install.packages("stringr")
library("stringr")
# Create a numeric variable `my_age` that is equal to your age
my_age <- 20
# Create a variable `my_name` that is equal to your first name
my_name <- "Andrew"
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
minutes_in_a_day <- 60 * 24
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
hours_in_a_year <- 24 * 365
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- minutes_in_a_day > hours_in_a_year
# Working with functions -------------------------------------------------------
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function(name, age) {
print(paste("Hello, my name is", name, ", and I'm", age, "years old."))
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction("Andrew", "20")
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- gsub("Hello, my name is", "Hey, I'm", my_intro)
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
loud_intro <- toupper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
quiet_intro <- tolower(my_intro)
# Create a new variable `capitalized`, which is your `my_intro` variable, but
# with each word capitalized. hint: use the stringr function `str_to_title`
captalized <- str_to_title(my_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurrences <- str_count(my_intro, e)
# Write a function `double()` that takes in a value and
# returns that value times two
double <- function(number) {
return(number * 2)
}
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
minutes_in_two_days <- double(minutes_in_a_day)
# Write a function `cube()` that takes in a value and returns that value cubed
cube <- function(number) {
return(number^3)
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Harry Potter", "Dark Knight", "Inception", "Coco", "Iron Man", "Les Miserbles")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[c(1:3)]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, "is a great movie!")
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
filter <- c(T, T, T, F, T, T)
movies[filter]
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- c(700:999)
# Using the built in `length()` function, create a variable `len` that is
# equal to the length of your vector `numbers`
len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_means <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that is the numbers 500:699
lower_numbers <- c(500:699)
# Create a vector `all_numbers` that combines `lower_numbers` and `numbers`
all_numbers <- c(lower_numbers, numbers)
# Dates ------------------------------------------------------------------------
# Use the appropriate function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- Sys.Date()
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2018). Make sure to use the `as.Date` function again
summer_break <- as.Date("June 8, 2018", "%b %d, %Y")
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
days_to_break <- summer_break - today
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, upcoming_birthday) {
N <- as.Date(upcoming_birthday, "%Y/%m/%d") - today
new_age <- age + 1
intro <- paste(make_introduction("name", "age"), "In ", N, " days I'll be ", new_age, ".", sep = "")
print(intro)
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018/10/03")
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(vector) {
gsub("[0-9]+","", vector)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO201", "CSE142"))
make_birthday_intro <- function(name, age, upcoming_birthday) {
N <- as.Date(upcoming_birthday, "%Y/%m/%d") - today
new_age <- age + 1
intro <- paste(make_introduction(name, age), "In ", N, " days I'll be ", new_age, ".", sep = "")
print(intro)
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018/10/03")
make_introduction <- function(name, age) {
print(paste("Hello, my name is", name, ", and I'm", age, "years old.", sep = ""))
}
my_intro <- make_introduction("Andrew", "20")
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function(name, age) {
print(paste("Hello, my name is ", name, ", and I'm ", age, "years old.", sep = ""))
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction("Andrew", "20")
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function(name, age) {
print(paste("Hello, my name is ", name, ", and I'm ", age, " years old.", sep = ""))
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction("Andrew", "20")
make_birthday_intro <- function(name, age, upcoming_birthday) {
N <- as.Date(upcoming_birthday, "%Y/%m/%d") - today
new_age <- age + 1
intro <- paste(make_introduction(name, age), "In ", N, " days I'll be ", new_age, ".", sep = "")
print(intro)
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018/10/03")
make_birthday_intro <- function(name, age, upcoming_birthday) {
N <- as.Date(upcoming_birthday, "%Y/%m/%d") - today
new_age <- age + 1
intro <- paste(make_introduction(name, age), " In ", N, " days I'll be ", new_age, ".", sep = "")
print(intro)
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018/10/03")
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function(name, age) {
print(paste("Hello, my name is ", name, ", and I'm ", age, " years old.", sep = ""))
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction("Andrew", "20")
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- gsub("Hello, my name is", "Hey, I'm", my_intro)
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
loud_intro <- toupper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
quiet_intro <- tolower(my_intro)
# Create a new variable `capitalized`, which is your `my_intro` variable, but
# with each word capitalized. hint: use the stringr function `str_to_title`
captalized <- str_to_title(my_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurrences <- str_count(my_intro, e)
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function(name, age) {
print(paste("Hello, my name is ", name, ", and I'm ", age, " years old.", sep = ""))
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction("Andrew", "20")
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- gsub("Hello, my name is", "Hey, I'm", my_intro)
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
loud_intro <- toupper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
quiet_intro <- tolower(my_intro)
# Create a new variable `capitalized`, which is your `my_intro` variable, but
# with each word capitalized. hint: use the stringr function `str_to_title`
captalized <- str_to_title(my_intro)
occurrences <- str_count(my_intro, "e")
?str_count
print(occurrences)
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, upcoming_birthday) {
N <- as.Date(upcoming_birthday, "%Y/%m/%d") - today
new_age <- age + 1
intro <- paste(make_introduction(name, age), " In ", N, " days I'll be ", new_age, ".", sep = "")
print(intro)
}
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018/10/03")
styler:::style_active_file()
make_birthday_intro <- function(name, age, upcoming_birthday) {
N <- as.Date(upcoming_birthday, "%Y/%m/%d") - today
new_age <- age + 1
intro <- paste(make_introduction(name, age), " In ", N, " days I'll be ", new_age, ".", sep = "")
print(intro)
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018/10/03")
shiny::runApp('C:/Users/USER/Desktop/INFO201/Final-Project-INFO201')
View(trend_data)
View(trend_data)
runApp('C:/Users/USER/Desktop/INFO201/Final-Project-INFO201')
runApp('C:/Users/USER/Desktop/INFO201/Final-Project-INFO201')
runApp('C:/Users/USER/Desktop/INFO201/Final-Project-INFO201')
plot_ly(trend_data, x= ~year, y = ~all_industry_total,
name = "U.S. GDP", type = "scatter", mode = "lines+markers") %>%
layout(title = "U.S. GDP Trend (1997-2017)",
xaxis = list(title = "Year"),
yaxis = list(title = "GDP (in millions)"))
runApp('C:/Users/USER/Desktop/INFO201/Final-Project-INFO201')
runApp('C:/Users/USER/Desktop/INFO201/Final-Project-INFO201')
runApp('C:/Users/USER/Desktop/INFO201/Final-Project-INFO201')
shiny::runApp('C:/Users/USER/Desktop/INFO201/Final-Project-INFO201')
runApp('C:/Users/USER/Desktop/INFO201/Final-Project-INFO201')
runApp('C:/Users/USER/Desktop/INFO201/Final-Project-INFO201')
runApp('C:/Users/USER/Desktop/INFO201/Final-Project-INFO201')
shiny::runApp('C:/Users/USER/Desktop/INFO201/Final-Project-INFO201')
install.packages("maps")
install.packages("geojsonio")
install.packages("RColorBrewer")
install.packages(:htmltools)
install.packages("htmltools")
install.packages("htmltools")
install.packages("lazyeval")
install.packages("sp")
install.packages("rgdal")
shiny::runApp('C:/Users/USER/Desktop/INFO201/Final-Project-INFO201')
install.packages("lazyeval")
runApp('C:/Users/USER/Desktop/INFO201/Final-Project-INFO201')
runApp('C:/Users/USER/Desktop/INFO201/Final-Project-INFO201')
View(all_industry)
View(all_industry)
runApp('C:/Users/USER/Desktop/INFO201/Final-Project-INFO201')
runApp('C:/Users/USER/Desktop/INFO201/Final-Project-INFO201')
shiny::runApp('C:/Users/USER/Desktop/INFO201/Final-Project-INFO201')
runApp('C:/Users/USER/Desktop/INFO201/Final-Project-INFO201')
shiny::runApp('C:/Users/USER/Desktop/INFO201/Final-Project-INFO201')
runApp('C:/Users/USER/Desktop/INFO201/Final-Project-INFO201')
runApp('C:/Users/USER/Desktop/INFO201/Final-Project-INFO201')
head("X1997", -1)
substring("X1993", 2)
runApp('C:/Users/USER/Desktop/INFO201/Final-Project-INFO201')
shiny::runApp('C:/Users/USER/Desktop/INFO201/Final-Project-INFO201')
runApp('C:/Users/USER/Desktop/INFO201/Final-Project-INFO201')
runApp('C:/Users/USER/Desktop/INFO201/Final-Project-INFO201')
runApp('C:/Users/USER/Desktop/INFO201/Final-Project-INFO201')
runApp('C:/Users/USER/Desktop/INFO201/Final-Project-INFO201')
runApp('C:/Users/USER/Desktop/INFO201/Final-Project-INFO201')
runApp('C:/Users/USER/Desktop/INFO201/Final-Project-INFO201')
runApp('C:/Users/USER/Desktop/INFO201/Final-Project-INFO201')
runApp('C:/Users/USER/Desktop/INFO201/Final-Project-INFO201')
shiny::runApp('C:/Users/USER/Desktop/INFO201/Final-Project-INFO201')
runApp('C:/Users/USER/Desktop/INFO201/Final-Project-INFO201')
runApp('C:/Users/USER/Desktop/INFO201/Final-Project-INFO201')
shiny::runApp('C:/Users/USER/Desktop/INFO201/Final-Project-INFO201')
runApp('C:/Users/USER/Desktop/INFO201/Final-Project-INFO201')
setwd("C:/Users/USER/Desktop/INFO201/Final-Project-INFO201")
lintr::lint("regional_2017.R")
lintr::lint("regional_2017.R")
lintr::lint("regional_2017.R")
shiny::runApp()
