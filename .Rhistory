print(hometown)
VIew(cars)
packages.install(cars)
search()
library(cars)
objects(2)
View(cars)
install.packages("ggplot2")
library("ggplot2")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = red))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = blue))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = "re"))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = "red"))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class), size = 3) + scale_color_brewer(palette = "Set2")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class), size = 3) + scale_color_brewer(palette = "Set2") +
facet_wrap(~class)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class), size = 3) + scale_color_brewer(palette = "Set2") +
scale_x_continuous() +
scale_y_continuous() +
scale_colour_brewer()
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class), size = 3) + scale_color_brewer(palette = "Set2") +
scale_x_continuous() +
scale_y_continuous() +
scale_colour_discrete()
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class), size = 3) + scale_color_brewer(palette = "Set5") +
scale_x_continuous() +
scale_y_continuous()
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class), size = 3) + scale_color_brewer(palette = "Set4") +
scale_x_continuous() +
scale_y_continuous()
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class), size = 3) + scale_color_brewer(palette = "Set1") +
scale_x_continuous() +
scale_y_continuous()
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class), size = 3) + scale_color_brewer() +
scale_x_continuous() +
scale_y_continuous()
shiny::runApp('C:/Users/Eric/Desktop/INFO 201/a8-shiny-undfsml')
runApp('C:/Users/Eric/Desktop/INFO 201/a8-shiny-undfsml')
runApp('C:/Users/Eric/Desktop/INFO 201/a8-shiny-undfsml')
runApp('C:/Users/Eric/Desktop/INFO 201/a8-shiny-undfsml')
runApp('C:/Users/Eric/Desktop/INFO 201/a8-shiny-undfsml')
library(dplyr)
# Read data
map_GDP_data <- read.csv(
file = "data/gdpstate.csv",
stringsAsFactors = FALSE
)
setwd("C:/Users/Eric/Desktop/INFO 201/Final-Project-INFO201")
# Read data
map_GDP_data <- read.csv(
file = "data/gdpstate.csv",
stringsAsFactors = FALSE
)
View(map_GDP_data)
# Select columns of interest
map_GDP_data <- map_GDP_data[-c(4681:5403) ,]
map_GDP_data_interest <- map_GDP_data %>%
select(GeoName, Description, starts_with("X"))
map_GDP_data_interest <- map_GDP_data %>%
select(GeoName, Description, starts_with("X"))
View(map_GDP_data_interest)
library(leaflet)
library(rgdal)
states_frame <- geojson_read("USA.json", what = "sp")
library(geojsonio)
states_frame <- geojson_read("USA.json", what = "sp")
popup <- paste0("<strong>State: </strong>",
states_frame$NAME,
"<br><strong>GDP: </strong>",
states_frame$X2016)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
levels(map_GDP_data_interest$Description)
map_GDP_data_interest$Description
unique(map_GDP_data_interest$Description)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(leaflet)
library("leaflet", lib.loc="~/R/win-library/3.4")
runApp()
runApp()
runApp()
runApp()
mdata <- map_GDP_data_interest[map_GDP_data_interest$Description == "Accommodation"]
View(mdata)
mdata <- filter(map_GDP_data_interest, "Description" == "Accommodation"]
mdata <- filter(map_GDP_data_interest, "Description" == "Accommodation"
d
mdata <- filter(map_GDP_data_interest, "Description" == "Accommodation")
View(mdata)
map_GDP_data_interest["Description"]
map_GDP_data_interest["Description"][1]
map_GDP_data_interest["Description"][[1]]
map_GDP_data_interest["Description", 1]
map_GDP_data_interest["Description", 2]
# Select columns of interest
map_GDP_data <- map_GDP_data[-c(4681:5403) ,]
map_GDP_data_interest <- map_GDP_data %>%
select(GeoName, Description, starts_with("X"))
# All industry data
map_all_industry <- map_GDP_data_interest %>%
filter(Description == "All industry total")
# Convert string numbers to int
index <- 3
for(i in map_all_industry[, -(1:2)]) {
map_all_industry[, index] <- as.numeric(i)
index <- index + 1
}
View(map_all_industry)
select(map_all_industry, "GeoName", paste0("X", 1997))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(mdata)
mdata <- select(map_all_industry, "GeoName", "X1997")
View(mdata)
runApp()
colnames(map_all_industry[- 1:2])
colnames(map_all_industry[-(1:2)])
runApp()
runApp()
runApp()
runApp()
View(pal)
states_frame <- sp::merge(states_frame, mdata(), by.x = "NAME", by.y = "GeoName")
states_frame <- sp::merge(states_frame, map_all_industry, by.x = "NAME", by.y = "GeoName")
as.numeric(states_frame$X1997)
runApp()
runApp()
runApp()
runApp()
m <- leaflet(states_frame) %>%
addTiles() %>%
setView(-96, 37.8, 4) %>%
addPolygons(
data = states_frame,
fillColor = ~pal(X1997),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
popup = popup,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE)
)
pal <- colorBin("YlOrRd", domain = states_frame$X1997, bins = bins)
bins <- c(10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, Inf)
pal <- colorBin("YlOrRd", domain = states_frame$X1997, bins = bins)
addPolygons(
data = states_frame,
fillColor = ~pal(X1997),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
popup = popup,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE)
)
m <- leaflet(states_frame) %>%
addTiles() %>%
setView(-96, 37.8, 4) %>%
addPolygons(
+     data = states_frame,
+     fillColor = ~pal(X1997),
+     weight = 2,
+     opacity = 1,
+     color = "white",
+     dashArray = "3",
+     fillOpacity = 0.7,
+     popup = popup,
+     highlight = highlightOptions(
+         weight = 5,
+         color = "#666",
+         dashArray = "",
+         fillOpacity = 0.7,
+         bringToFront = TRUE)
+ )
m <- leaflet(states_frame) %>%
addTiles() %>%
setView(-96, 37.8, 4)
m <- m %>% addPolygons(
data = states_frame,
fillColor = ~pal(X1997),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
popup = popup,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE)
)
m
states_frame <- geojson_read("USA.json", what = "sp")
states_frame_combined <- sp::merge(states_frame, map_all_industry, by.x = "NAME", by.y = "GeoName")
View(states_frame)
runApp()
runApp()
runApp()
runApp()
states_frame <- geojson_read("USA.json", what = "sp")
states_frame_combined <- sp::merge(states_frame, map_all_industry, by.x = "NAME", by.y = "GeoName")
runApp()
leaflet(states_frame_combined) %>%
addTiles() %>%
setView(-96, 37.8, 4) %>%
addPolygons(
data = states_frame,
fillColor = ~pal(X1997),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
popup = popup,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE)
)
states_frame <- geojson_read("USA.json", what = "sp")
states_frame_combined <- sp::merge(states_frame, map_all_industry, by.x = "NAME", by.y = "GeoName")
bins <- c(10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, Inf)
pal <- colorBin("YlOrRd", domain = states_frame_combined$X1997, bins = bins)
leaflet(states_frame_combined) %>%
addTiles() %>%
setView(-96, 37.8, 4) %>%
addPolygons(
data = states_frame,
fillColor = ~pal(X1997),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
popup = popup,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE)
)
m <- leaflet(states) %>%
setView(-96, 37.8, 5) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(X1997),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
)
m <- leaflet(states) %>%
setView(-96, 37.8, 5) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(X1997),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
)
m <- leaflet(states_frame_combined) %>%
setView(-96, 37.8, 5) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(X1997),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
)
runApp()
runApp()
runApp()
runApp()
runApp()
~pal(states_frame[, X1997])
~pal("hello")
runApp()
options(error = recover)
runApp()
runApp()
runApp()
options(error = FALSE)
options(error = FALSE)
-
